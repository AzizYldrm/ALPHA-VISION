"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatStreamRequest = void 0;
const core = __importStar(require("../../../core"));
const ChatMessage_1 = require("../../types/ChatMessage");
const ChatStreamRequestPromptTruncation_1 = require("../../types/ChatStreamRequestPromptTruncation");
const ChatConnector_1 = require("../../types/ChatConnector");
const ChatDocument_1 = require("../../types/ChatDocument");
const Tool_1 = require("../../types/Tool");
const ChatStreamRequestToolResultsItem_1 = require("../../types/ChatStreamRequestToolResultsItem");
exports.ChatStreamRequest = core.serialization.object({
    message: core.serialization.string(),
    model: core.serialization.string().optional(),
    preamble: core.serialization.string().optional(),
    chatHistory: core.serialization.property("chat_history", core.serialization.list(ChatMessage_1.ChatMessage).optional()),
    conversationId: core.serialization.property("conversation_id", core.serialization.string().optional()),
    promptTruncation: core.serialization.property("prompt_truncation", ChatStreamRequestPromptTruncation_1.ChatStreamRequestPromptTruncation.optional()),
    connectors: core.serialization.list(ChatConnector_1.ChatConnector).optional(),
    searchQueriesOnly: core.serialization.property("search_queries_only", core.serialization.boolean().optional()),
    documents: core.serialization.list(ChatDocument_1.ChatDocument).optional(),
    temperature: core.serialization.number().optional(),
    maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
    maxInputTokens: core.serialization.property("max_input_tokens", core.serialization.number().optional()),
    k: core.serialization.number().optional(),
    p: core.serialization.number().optional(),
    seed: core.serialization.number().optional(),
    stopSequences: core.serialization.property("stop_sequences", core.serialization.list(core.serialization.string()).optional()),
    frequencyPenalty: core.serialization.property("frequency_penalty", core.serialization.number().optional()),
    presencePenalty: core.serialization.property("presence_penalty", core.serialization.number().optional()),
    rawPrompting: core.serialization.property("raw_prompting", core.serialization.boolean().optional()),
    tools: core.serialization.list(Tool_1.Tool).optional(),
    toolResults: core.serialization.property("tool_results", core.serialization.list(ChatStreamRequestToolResultsItem_1.ChatStreamRequestToolResultsItem).optional()),
});
